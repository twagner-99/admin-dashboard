:root {
    --blue: rgb(26 146 211);
    --grey: rgb(226 232 240);
    --yellow: rgb(240 180 42);
    --font-stack: "Roboto", system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

* {                 /* Add this to my notes? */
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: var(--font-stack);
}

body {
    height: 100vh;
    display: grid;
    grid-template-columns: minmax(180px, 1fr) 6fr;  /* Don't get any smaller than 180px, but don't take up more than 1fr of remaining space */
    grid-template-rows: 1fr 6fr;      /* Chose to explicitly define rows to not only make them the right proportions right off the bat, but also so I can use grid-row: 1 / -1; because if additional row get added, this way the side bar will automatically span all of it. */
}                                     /* I could have let it implicitly define my rows, but then I would need grid-row: 1 / 3; AND it would size based on the height of my content */

.sidebar {
    background-color: var(--blue);
    grid-row: 1 / -1;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: auto auto 1fr;  /* Let the last row drive the layout by trying to take up the whole height using 1fr, then let the first two columns only be as high as their content */
    gap: 50px;
    padding: 15px;
    color: white;
}

.sidebar .link {
    display: flex;
    gap: 15px;
    align-items: center;
}

.link:nth-child(n + 2) {    /* Selects every element with class="link" beginning with the 2nd */
    margin: .25rem 0;       /* Margin, not padding, because we want to push adjacent elements apart */
}

.main {
    background-color: var(--grey);
}