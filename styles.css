:root {
    --blue: rgb(26 146 211);
    --grey: rgb(226 232 240);
    --dark-grey: rgb(99 99 99);
    --yellow: rgb(240 180 42);
    --font-stack: "Roboto", system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

* {                 /* Add this to my notes? */
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    list-style: none;
    font-family: var(--font-stack);
    font-size: 100%;
}

body {
    height: 100vh;
    display: grid;
    grid-template-columns: minmax(180px, 1fr) 6fr;  /* Don't get any smaller than 180px, but don't take up more than 1fr of remaining space */
    grid-template-rows: 1fr 6fr;      /* Chose to explicitly define rows to not only make them the right proportions right off the bat, but also so I can use grid-row: 1 / -1; because if additional row get added, this way the side bar will automatically span all of it. */
}                                     /* I could have let it implicitly define my rows, but then I would need grid-row: 1 / 3; AND it would size based on the height of my content */

body > div {
    padding: 15px;
}

.sidebar {
    background-color: var(--blue);
    grid-row: 1 / -1;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: repeat(3, min-content);  /* Using min-content so the rows don't try to span the entire height of the sidebar container like they'd do with auto of fractional units */
    gap: 50px;
    color: white;
}

.sidebar .link {
    display: grid;
    grid-template-columns: auto 1fr;
    column-gap: 10px;
    row-gap: 15px;
}

.header { 
    display: grid;
    grid-template-rows: 1fr 1fr;
}

.header-top > *,
.header-bottom > * {
    display: flex;
    align-items: center;
    gap: 15px;
}

.header-top {
    display: grid;
    grid-template-columns: 1fr auto; /* Let the search bar take up as much as possible, then the right side gets whatever is left (essentially min-content) */
    grid-template-rows: min-content;
    gap: 15%;
}

.end {
    justify-self: end;
}

.header-bottom {
    display: grid;
    grid-template-columns: 1fr auto;
    grid-template-rows: min-content;
    place-content: end;
}

.main {
    background-color: var(--grey);
    display: grid;
    grid-template-columns: 3fr 1fr;
    gap: 15px;
}

.main-left > h1,
.main-right > h1 {
    margin-bottom: 10px;
}

.card-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 15px;
}

.main-left .card {
    background-color: white;
    padding: 1.5rem;
    display: grid;
    grid-template-rows: auto 1fr auto;
}

.icons {
    justify-self: end;
    margin-top: 15px;
}

.card-container ul {
    display: flex;
    gap: 1rem;
}

.main-right p {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.main-right .card {
    background-color: white;
    padding: 0 15px;
}

.announce > div:nth-last-child(n + 2) {     /* Select every direct div child within .announce starting with the second from the bottom and counting backwards */
    border-bottom: 1px solid var(--grey);
}

.announce > div {
    padding: 15px 0;
}

input {
    appearance: none;
    border: none;
    border-radius: 15px;
    background-color: var(--grey);
    flex-grow: 1;
    padding: .25rem .5rem;
}

button {
    border: none;
    background-color: var(--blue);
    color: white;
    border-radius: 15px;
    padding: .5rem 1rem;
}